services:
  panel:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - FOLDER_NAME=panel
        - PORT_NUMBER=8083
    restart: unless-stopped
    ports:
      - "8083:8083"
      # env_file:
      # - ./panel/.env
    volumes:
      - "panel_static:/app/panel/static"
    depends_on:
      db:
        condition: service_healthy
  publisherwebsite:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - FOLDER_NAME=publisherwebsite
        - PORT_NUMBER=8084
    restart: unless-stopped
    ports:
      - "8084:8084"
    volumes:
      - "publisherwebsite_static:/app/publisherwebsite/static"
      # - "publisherwebsite_html:/app/publisherwebsite/html"
  adserver:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - FOLDER_NAME=adserver
        - PORT_NUMBER=8081
    restart: unless-stopped
    ports:
      - "8081:8081"
    depends_on:
      kafka:
        condition: service_healthy
      panel:
        condition: service_started
  eventserver:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - FOLDER_NAME=eventserver
        - PORT_NUMBER=8082
    restart: unless-stopped
    ports:
      - "8082:8082"
    depends_on:
      kafka:
        condition: service_healthy
  db:
    image: 'postgres:15.7-alpine'
    environment:
      - 'POSTGRES_DB=mini_yektanet_db'
      - 'POSTGRES_USER=postgres'
      - 'POSTGRES_PASSWORD=1234'
    ports:
      - '5433:5432'
    restart: unless-stopped
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "db_prod" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
  redis:
    # image: redis:7.2.5-alpine
    build:
      context: .
      dockerfile: Dockerfile.redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    # command: redis-server --appendonly yes --loadmodule /opt/redis-stack/lib/redisbloom.so
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
  zookeeper:
    # image: zookeeper:3.8.4
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped
    ports:
      - 2181:2181
    volumes:
      # - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-data:/data
      # - zookeeper-logs:/var/lib/zookeeper/log
      - zookeeper-logs:/log
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 3
  kafka:
    # image: apache/kafka:3.7.1
    image: &kafka-image confluentinc/cp-server:7.5.0
    depends_on:
      zookeeper:
        condition: service_healthy
    #    ports:
    #      - 29092:29092
    #      - 9092:9092
    restart: unless-stopped
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      # KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_ADVERTISED_LISTENERS: DOCKER://kafka:9092,HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER:PLAINTEXT,HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: HOST
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      # KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # KAFKA_CREATE_TOPICS: "click_events:3:1,impression_events:3:1"

    volumes:
      - kafka-data:/var/lib/kafka/data
      # - kafka-data:/opt/kafka/data
      - kafka-docker-sock:/var/run/docker.sock
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:9092 --list
      interval: 30s
      timeout: 10s
      retries: 3
  init-kafka:
    image: *kafka-image
    entrypoint: /bin/bash -c "kafka-topics --create --if-not-exists --topic click_events --replication-factor=1 --partitions=3 --bootstrap-server kafka:9092 && kafka-topics --create --if-not-exists --topic impression_events --replication-factor=1 --partitions=3 --bootstrap-server kafka:9092 && exit 0"
    depends_on:
      kafka:
        condition: service_healthy
  prometheus:
    image: prom/prometheus:v2.53.1
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
  grafana:
    image: grafana/grafana:11.1.1
    restart: unless-stopped
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
  redis-exporter:
    image: oliver006/redis_exporter:v1.62.0
    environment:
      - REDIS_ADDR=redis:6379
    ports:
      - "9121:9121"
  kafka-exporter:
    image: danielqsj/kafka-exporter:v1.7.0
    command:
      - --kafka.server=kafka:9092
    ports:
      - "9308:9308"
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:1234@db:5432/mini_yektanet_db?sslmode=disable
    ports:
      - "9187:9187"

volumes:
  panel_static:
  postgres_data:
  publisherwebsite_static:
  redis-data:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  kafka-docker-sock:
  grafana-data:
  prometheus-data:
